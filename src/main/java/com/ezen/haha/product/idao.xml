<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ezen.haha.product.Service">
	<resultMap type="com.ezen.haha.product.ProductDTO" id="product">
		<result property="image" column="image"/>
		<result property="sname" column="sname"/>
		<result property="price" column="price"/>
	</resultMap>
	<resultMap type="com.ezen.haha.membership.MembershipDTO" id="membership">
		<result property="id" column="id"/>
		<result property="pw" column="pw"/>
		<result property="name" column="name"/>
		<result property="tel" column="tel"/>
		<result property="email" column="email"/>
		<result property="pid" column="pid"/>
		<result property="address" column="address"/>
		<result property="stringrank" column="stringrank"/>
		<result property="rank" column="rank"/>
	</resultMap>
	<resultMap type="com.ezen.haha.product.BasketDTO" id="basket">
		<result property="id" column="id"/>
		<result property="psize" column="psize"/>
		<result property="basketnum" column="basketnum"/>
		<result property="snum" column="snum"/>
		<result property="guestbuysu" column="guestbuysu"/>
		<result property="color" column="color"/>
		<result property="stock" column="stock"/>
		<collection property="productdto" ofType="com.ezen.haha.product.ProductDTO" resultMap="product"/>
		<collection property="membershipdto" ofType="com.ezen.haha.membership.MembershipDTO" resultMap="membership"/>
	</resultMap>


	<!-- 관리자 상품 정보 입력 -->
	<insert id="productinsert">
		insert into product values(#{param1},#{param2},#{param3},#{param4},#{param5},
								   #{param6},#{param7},#{param8},#{param9},#{param10},
								   #{param11},#{param12},#{param13},0)
	</insert>

	<!-- 상품 정보(목록) 출력 -->
	<select id="productout" resultType="com.ezen.haha.product.ProductDTO">		
		select * from (
        select 
            row_number() over (order by sname, snum) as rn, A.* 
        from (
            select * from product) A
    	) where rn between #{start} AND #{end}
	</select>
	
	<!-- 상품 내용 출력 -->
	<select id="detailview" resultType="com.ezen.haha.product.ProductDTO">
		select * from product where snum=#{param1}
	</select>
	
	<!-- 컬러에 맞는 제품의 상품 코드 가져오기 -->
	<select id="colorsnumsearch" resultType="java.lang.Integer">
		select snum from product where sname=#{param1} and color=#{param2}
	</select>
	<!-- 상품이 존재하는지 체크 -->
	<select id="jaegocheck" resultType="int">
		select count(*) from product where snum=#{param1} and ssize=#{param2} and color=#{param3} and su>=#{param4}
	</select>
	
	<!-- 장바구니 동일 제품이 있는지 중복 체크  -->
	<select id="duplicateCheck" resultType="int">
		select count(*) from basket where id=#{param1} and snum=#{param2} and psize=#{param3}
	</select>
	<!-- 장바구니 데이터 DB에 저장 -->
	<insert id="basketinsert">
		insert into basket values(basket_seq.nextval,#{param1},#{param2},#{param3},#{param4},#{param5})
	</insert>
	<!--  즉시구매 장바구니 데이터 DB에 저장 -->
	<insert id="basketdirectinsert" parameterType="com.ezen.haha.product.BasketDTO" useGeneratedKeys="true" keyProperty="basketnum" keyColumn="basketnum">
		insert into basket values(basket_seq.nextval,#{id},#{snum},#{guestbuysu},#{psize},#{color})
	</insert>
	
	
	<!-- 장바구니 출력 -->
	<select id="basketout" resultMap="basket">
		select b.*, p.image, p.sname, p.price 
			from basket b join product p 
			on b.snum = p.snum
			where id = #{param1} 
	</select>
	
	<!-- 장바구니에서 수정한 수량, 총 가격 업데이트 -->
	<update id="updatebasket">
		update basket set guestbuysu = #{param2} where basketnum = #{param1}
	</update>
	

		
	<!-- 장바구니에서 체크박스 선택(장바구니 번호로 구분) 후 구매 화면으로 이동 -->
	<select id="basketsell" resultMap="basket"> 
		SELECT b.id, b.snum, b.sname, b.stype, b.guestbuysu, b.totprice, b.ssize, b.image, b.color,
       		   m.name, m.tel, m.email, m.address
		from basket b
		inner join member m on b.id = m.id
		where b.basketnum = #{param1}
	</select>	
	
	<!-- 구매 시 정보 입력을 위해 회원 정보를 가져옴 -->
	<select id="IDinformation" resultType="com.ezen.haha.membership.MembershipDTO">
		select id,name,tel,email,address from member where id=#{param1}
	</select>
	
	<!-- 구매 버튼 누를 시 주문 정보 초기화 -->
	<delete id="deleteproductsell">
		delete from productsell
	</delete>
	
	<!-- 구매 버튼 누를 시 주문 정보 DB에 저장 -->
	<insert id="Productsellinsert">
		insert into productsell values(sell_seq.nextval,#{param1},#{param2},#{param3},#{param4},#{param5},#{param6},#{param7},#{param8},#{param9},#{param10},#{param11},#{param12},#{param13})
	</insert>
	
	<!-- 구매 버튼 누를 시 주문 정보 출력 -->
	<select id="productsellout" resultType="com.ezen.haha.product.ProductSellDTO">
		select * from productsell
	</select>
	
	<!-- 주문 결제 창 정보 출력 -->
	<select id="productsell" resultMap="basket">
		select b.*, p.sname, p.image, p.price
			   from basket b join product p
			   on b.snum = p.snum
			   where basketnum = #{param1}
	</select>
	
	<!-- 주문 결제 창 정보(포인트,등급) 출력 -->
	<select id="pointOut" resultType="String">
		select point from member where id=#{param1} 
	</select>
	<select id="rankOut" resultType="String">
		select rank from member where id=#{param1} 
	</select>
	
	<!-- 페이징 처리 -->
	<select id="total" resultType="int">
	   select count(distinct sname) from product <!-- 이름이 같을 경우 중복방지 --> 
	</select>
	<select id="totalbasket" resultType="int">
	   select count(*) from basket where id=#{param1}
	</select>
	<select id="totalReview" resultType="int">
	   select count(*) from productreview 
	</select>
	<!-- 장바구니 목록 삭제 -->
	<delete id="deletebasket">
		delete from basket where basketnum=#{param1}
	</delete>
	
	<!-- 상품 내용 화면에서 상품 삭제 -->
	<delete id="deleteproduct">
		delete from product where snum=#{param1}
	</delete>
	
	<!-- 상품 내용 화면에서 상품 수정 화면으로 가기 -->
	<select id="updateproductview" resultType="com.ezen.haha.product.ProductDTO">
		select * from product where snum=#{param1}
	</select>
	
	<!-- 상품 수정 화면에서 받은 데이터로 상품 정보 수정하기 -->
	<update id="productupdate">
    update product set sname=#{param1}, stype=#{param2}, stype_sub=#{param3}, price=#{param4},
        ssize=#{param5}, msize=#{param6}, lsize=#{param7}, xlsize=#{param8}, image=#{param9},
        intro=#{param10}, best=#{param11}, recommend=#{param12} 
        where snum=#{param13}
	</update>
	
	<!-- 상품 리뷰 입력 후 DB에 저장 -->
	<insert id="productreviewsave">
		insert into productreview values(review_seq.nextval,#{param1},#{param2},#{param3},1,#{param4},#{param5},#{param6},sysdate,#{param7},#{param8},0)
	</insert>
	<insert id="productreviewsaveNotImage">
		insert into productreview values(review_seq.nextval,#{param1},#{param2},#{param3},1,#{param4},#{param5},#{param6},sysdate,#{param7},#{param8},0)
	</insert>
	
	<update id="productreviewupdate">
		update productreview 
		set btitle = #{param2}, bcontent = #{param3}, bpicture = #{param4}, productrank = #{param5}, bdate = sysdate
		where bnum=#{param1} 
	</update>
	
	
	
	<delete id="productReviewDelete">
		delete from productreview where bnum = #{param1}
	</delete>
	<!-- 상품 리뷰 출력(detailview.jsp) -->
	<select id="productreviewout" resultType="com.ezen.haha.product.ProductreviewDTO">
		select id,btitle,bcontent,bpicture,to_char(bdate,'yyyy-MM-dd')bdate,productrank from productreview where snum=#{param1}
	</select>
	
	<select id="stockcheck" resultType="String">
		select ${param2}size from product where snum = #{param1}
	</select>
	
	
	<!-- 베스트 상품 정보(목록) 출력 -->
	<select id="bestsearchout" resultType="com.ezen.haha.product.ProductDTO">      
		SELECT *
		FROM (
   			SELECT ROW_NUMBER() OVER (ORDER BY p.snum DESC) AS rn, p.*,      
           	pr.avg_productrank AS productrank,
           	pr.review_count AS count
    		FROM product p
    		LEFT JOIN (
        		SELECT snum,
	            	AVG(productrank) AS avg_productrank,
	                COUNT(*) AS review_count
        		FROM productreview
        		GROUP BY snum
    		) pr ON p.snum = pr.snum
    		WHERE p.best = 1
    	)WHERE rn BETWEEN #{param1} AND #{param2}
   </select>
   <!-- 베스트 상품 정보(목록) 가격 오름순(낮은가격순) 출력 -->
   <select id="bestsearchouthighest" resultType="com.ezen.haha.product.ProductDTO">      
   		SELECT *
		FROM (
   			SELECT ROW_NUMBER() OVER (ORDER BY p.price ASC) AS rn, p.*,      
           	pr.avg_productrank AS productrank,
           	pr.review_count AS count
    		FROM product p
    		LEFT JOIN (
        		SELECT snum,
	            	AVG(productrank) AS avg_productrank,
	                COUNT(*) AS review_count
        		FROM productreview
        		GROUP BY snum
    		) pr ON p.snum = pr.snum
    		WHERE p.best = 1
    	)WHERE rn BETWEEN #{param1} AND #{param2}
   </select>
   <!-- 베스트 상품 정보(목록) 가격 내림순(높은가격순) 출력 -->
   <select id="bestsearchoutlowest" resultType="com.ezen.haha.product.ProductDTO">      
      	SELECT *
		FROM (
   			SELECT ROW_NUMBER() OVER (ORDER BY p.price DESC) AS rn, p.*,      
           	pr.avg_productrank AS productrank,
           	pr.review_count AS count
    		FROM product p
    		LEFT JOIN (
        		SELECT snum,
	            	AVG(productrank) AS avg_productrank,
	                COUNT(*) AS review_count
        		FROM productreview
        		GROUP BY snum
    		) pr ON p.snum = pr.snum
    		WHERE p.best = 1
    	)WHERE rn BETWEEN #{param1} AND #{param2}
   </select>
	
	<!-- 관리자, 상품 정보(목록) 출력 -->
	<select id="searchout" resultType="com.ezen.haha.product.ProductDTO">      
    	SELECT *
		FROM (
   			SELECT ROW_NUMBER() OVER (ORDER BY p.snum DESC) AS rn, p.*,      
           	pr.avg_productrank AS productrank,
           	pr.review_count AS count
    		FROM product p
    		LEFT JOIN (
        		SELECT snum,
	            	AVG(productrank) AS avg_productrank,
	                COUNT(*) AS review_count
        		FROM productreview
        		GROUP BY snum
    		) pr ON p.snum = pr.snum
    		WHERE p.stype = #{param1}
    	)WHERE rn BETWEEN #{param2} AND #{param3}
   </select>
   <select id="subsearchout" resultType="com.ezen.haha.product.ProductDTO">      
   		SELECT *
		FROM (
   			SELECT ROW_NUMBER() OVER (ORDER BY p.snum DESC) AS rn, p.*,      
           	pr.avg_productrank AS productrank,
           	pr.review_count AS count
    		FROM product p
    		LEFT JOIN (
        		SELECT snum,
	            	AVG(productrank) AS avg_productrank,
	                COUNT(*) AS review_count
        		FROM productreview
        		GROUP BY snum
    		) pr ON p.snum = pr.snum
    		WHERE p.stype_sub = #{param1}
    	)WHERE rn BETWEEN #{param2} AND #{param3}
   </select>
   <!-- 상품 정보(목록) 가격 오름순(낮은가격순) 출력 -->
   <select id="searchouthighest" resultType="com.ezen.haha.product.ProductDTO">      
     SELECT *
		FROM (
   			SELECT ROW_NUMBER() OVER (ORDER BY p.price ASC) AS rn, p.*,      
           	pr.avg_productrank AS productrank,
           	pr.review_count AS count
    		FROM product p
    		LEFT JOIN (
        		SELECT snum,
	            	AVG(productrank) AS avg_productrank,
	                COUNT(*) AS review_count
        		FROM productreview
        		GROUP BY snum
    		) pr ON p.snum = pr.snum
    		WHERE p.stype = #{param1}
    	)WHERE rn BETWEEN #{param2} AND #{param3}
   </select>
   <!-- 상품 정보(목록) 가격 내림순(높은가격순) 출력 -->
   <select id="searchoutlowest" resultType="com.ezen.haha.product.ProductDTO">      
      SELECT *
		FROM (
   			SELECT ROW_NUMBER() OVER (ORDER BY p.price DESC) AS rn, p.*,      
           	pr.avg_productrank AS productrank,
           	pr.review_count AS count
    		FROM product p
    		LEFT JOIN (
        		SELECT snum,
	            	AVG(productrank) AS avg_productrank,
	                COUNT(*) AS review_count
        		FROM productreview
        		GROUP BY snum
    		) pr ON p.snum = pr.snum
    		WHERE p.stype = #{param1}
    	)WHERE rn BETWEEN #{param2} AND #{param3}
   </select>
   <select id="subsearchouthighest" resultType="com.ezen.haha.product.ProductDTO">      
      SELECT *
		FROM (
   			SELECT ROW_NUMBER() OVER (ORDER BY p.price ASC) AS rn, p.*,      
           	pr.avg_productrank AS productrank,
           	pr.review_count AS count
    		FROM product p
    		LEFT JOIN (
        		SELECT snum,
	            	AVG(productrank) AS avg_productrank,
	                COUNT(*) AS review_count
        		FROM productreview
        		GROUP BY snum
    		) pr ON p.snum = pr.snum
    		WHERE p.stype_sub = #{param1}
    	)WHERE rn BETWEEN #{param2} AND #{param3}
   </select>
   <select id="subsearchoutlowest" resultType="com.ezen.haha.product.ProductDTO">      
        SELECT *
		FROM (
   			SELECT ROW_NUMBER() OVER (ORDER BY p.price DESC) AS rn, p.*,      
           	pr.avg_productrank AS productrank,
           	pr.review_count AS count
    		FROM product p
    		LEFT JOIN (
        		SELECT snum,
	            	AVG(productrank) AS avg_productrank,
	                COUNT(*) AS review_count
        		FROM productreview
        		GROUP BY snum
    		) pr ON p.snum = pr.snum
    		WHERE p.stype_sub = #{param1}
    	 )WHERE rn BETWEEN #{param2} AND #{param3}
   </select>
   
   
	<select id="totalSearch" resultType="int">
	   select count(*) from product where stype=#{param1}
	</select>
	<select id="totalSubSearch" resultType="int">
	   select count(*) from product where stype_sub=#{param1}
	</select>
	<!-- 베스트상품 페이징처리 -->
	<select id="besttotalSearch" resultType="int">
	   select count(*) from product where best=1
	</select>
	
	
	<!-- 추천 상품 찾기(조건에 맞는 상품 랜덤 10개 출력) -->
	<select id="recommendsearch" resultType="com.ezen.haha.product.ProductDTO">
	 <![CDATA[
        select * 
		from (
	    	select p.*,
	    	pr.avg_productrank as productrank,
           	pr.reveiw_count as count
	    	from product p 
	    	left join (
	    		select snum, avg(productrank) as avg_productrank,
	    			   count(*) as reveiw_count
	    		from productreview
	    		group by snum
	    	) pr on p.snum = pr.snum 
	    	where recommend = #{param1}
	    	order by dbms_random.random )
	    where rownum <= 10
     ]]> 
      
     
     
     
     
	</select>
	
	<select id="searchOutValue" resultType="com.ezen.haha.product.ProductDTO">    
		SELECT *
		FROM (
   			SELECT ROW_NUMBER() OVER (ORDER BY p.snum DESC) AS rn, p.*,      
           	pr.avg_productrank AS productrank,
           	pr.review_count AS count
    		FROM product p
    		LEFT JOIN (
        		SELECT snum,
	            	AVG(productrank) AS avg_productrank,
	                COUNT(*) AS review_count
        		FROM productreview
        		GROUP BY snum
    		) pr ON p.snum = pr.snum
    		WHERE sname like '%' || #{param1} || '%'
    	 )WHERE rn BETWEEN #{param2} AND #{param3}
   </select>
	<select id="totalValue" resultType="int">
	   select count(*) from product where sname like '%' || #{param1} || '%'
	</select>
	
	 <select id="searchOutKey" resultType="com.ezen.haha.product.ProductDTO">      
      select * from (
       select row_number() over (order by snum) as rn, A.* from (
        select * from product where stype = #{param1} ) A
        ) where rn between #{param2} and #{param3}
   </select>
	<select id="totalKey" resultType="int">
	   select count(*) from product where stype = #{param1}
	</select>
	
	<select id="searchOutKeyValue" resultType="com.ezen.haha.product.ProductDTO">      
      select * from (
       select row_number() over (order by snum) as rn, A.* from (
        select * from product where stype = #{param1} and sname like '%' || #{param2} || '%' ) A
        ) where rn between #{param3} and #{param4}
   </select>
	<select id="totalKeyValue" resultType="int">
	   select count(*) from product where stype = #{param1} and sname like '%' || #{param2} || '%' 
	</select>
	
	<!-- 주소지 목록 불러오기-->
	<select id="addresslistout" resultType="com.ezen.haha.mypage.AddressListDTO">
		select * from addresslist where id = #{param1}
	</select>
	<!-- 쿠폰 목록 불러오기-->
	<select id="couponlistout" resultType="com.ezen.haha.mypage.CouponDTO">
		select * from coupon where id = #{param1}
	</select>

	<update id="updateViewNum">
		update product set viewnum = viewnum+1  where snum = #{param1} 
	</update>
	<!-- 시각화 전에 필요한 데이터(상품 결재한 유저 id의 주민번호) 가져오기 -->
	<select id="payinfodata" resultType="com.ezen.haha.membership.MembershipDTO">
		select pid from member where id IN (
    		select id from payinfo where snum = #{param1} )
	</select>
	
	
	<select id="productReviewOut" resultType="com.ezen.haha.product.ProductreviewDTO">		
		select * from (
        select 
            row_number() over (order by bnum) as rn, A.* 
        from (
            select * from productreview) A
    	) where rn between #{start} AND #{end}
	</select>
	<select id="detailReview" resultType="com.ezen.haha.product.ProductreviewDTO">		
		select * from productreview where bnum = #{param1}
	</select>
	
	<update id="bestreview">
		update productreview set bestreview = 1 where bnum = #{param1}
	</update>
	<update id="bestreviewout">
		update productreview set bestreview = 0 where bnum = #{param1}
	</update>
	
	<select id="bestViewNum" resultType="com.ezen.haha.product.ProductDTO">
	  <![CDATA[
	    SELECT * FROM (
	        SELECT * FROM product
	        ORDER BY viewnum DESC
	    ) WHERE ROWNUM <= 5
    ]]>
	</select>
	<select id="bestReview" resultType="com.ezen.haha.product.ProductreviewDTO">
	  <![CDATA[
	   SELECT * FROM (
	    SELECT * FROM productreview
	    WHERE bestreview = 1
	    ORDER BY dbms_random.value
	    ) WHERE ROWNUM <= 5
    ]]>
	</select>
	<select id="takeReview" resultType="com.ezen.haha.product.ProductreviewDTO">
		select * from productreview where bnum = #{param1}
	</select>
	
	<!-- 상품 리뷰 목록 이미지 불러오기 -->
	<select id="getImage" resultType="String">
		select image from product where snum=#{param1}
	</select>
	
	<!-- 상품 리뷰 목록 상품명 불러오기 -->
	<select id="getSname" resultType="String">
		select sname from product where snum=#{param1}
	</select>
	<select id="selectReview" resultType="com.ezen.haha.product.ProductDTO">
		select snum,sname,image from product where snum = #{param1} 
	</select>

	<select id="checkReview" resultType="com.ezen.haha.product.ProductreviewDTO">
		select * from productreview where id = #{param1} and snum = #{param2}
	</select>
	
	<select id="deleteFile" resultType="String">
		select bpicture from productreview where id = #{param1} and snum = #{param2}
	</select>
	
	<select id="selectBnum" resultType="Integer" >
		select bnum from productreview where id = #{param1} and snum = #{param2} 
	</select>
</mapper>
